name: CMake

on: [push]

env:
  PROJECT_NAME: Pamplejuce # Must match the JUCE project name from juce_add_plugin
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  
# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
        - os: windows-latest
          artifact: Windows
        - os: ubuntu-latest
          artifact: Linux
        - os: macos-latest
          artifact: MacOS

    steps:
    - name: Install JUCE's Linux Deps 
      if: runner.os == 'Linux'
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev
      
    - name: Get latest CMake
      uses: lukka/get-cmake@latest      

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true # Gotta get JUCE populated

    - name: Build
      shell: bash
      run: cmake -B ${BUILD_DIR} --config ${BUILD_TYPE} .

    - name: Test
      shell: bash
      run: ctest -C $BUILD_TYPE

    - name: Zip
      working-directory: ./${BUILD_DIR}/${PROJECT_NAME}_artefacts
      run: cmake -E tar cfv ../../${PROJECT_NAME}-${{ matrix.artifact }}.zip --format=zip .

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ./${PROJECT_NAME}-${{ matrix.artifact }}.zip
        name: ${PROJECT_NAME}-${{ matrix.artifact }}.zip

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test
    outputs: 
        upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download All Artifacts
      uses: actions/download-artifact@v2
  
    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${PROJECT_NAME}-Windows.zip
        asset_name: ${PROJECT_NAME}-Windows.zip
        asset_content_type: application/zip

    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${PROJECT_NAME}-Linux.zip
        asset_name: ${PROJECT_NAME}-Linux.zip
        asset_content_type: application/zip

    - name: Upload MacOS Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${PROJECT_NAME}-MacOS.zip
        asset_name: ${PROJECT_NAME}-MacOS.zip
        asset_content_type: application/zip
