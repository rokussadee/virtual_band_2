name: Pamplejuce

on: 
  push:
  workflow_dispatch:
    
env:
  PROJECT_NAME: Pamplejuce
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this
  CMAKE_BUILD_PARALLEL_LEVEL: 3 # Use up to 3 cpus to build juceaide, etc
  
# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include: 
          - name: Linux
            os: ubuntu-22.04
          - name: macOS
            os: macos-12
          - name: Windows
            os: windows-latest

    steps:
    - name: Install JUCE's Linux Deps
      if: runner.os == 'Linux'
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: |
        sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev xvfb fluxbox

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true # Gotta get JUCE populated
        
    - name: Setup Environment Variables
      shell: bash
      run: |
        VERSION=$(cat VERSION)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
        echo "VST3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3" >> $GITHUB_ENV
        echo "AU_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AU/${{ env.PROJECT_NAME }}.component" >> $GITHUB_ENV
        echo "AUV3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AUv3/${{ env.PROJECT_NAME }}.appex" >> $GITHUB_ENV
          
    - name: ccache
      if: matrix.os != 'windows-latest'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.type }}
        
    - name: Import Certificates
      uses: apple-actions/import-codesign-certs@v1
      if: ${{ matrix.name == 'macOS' }}
      with:
        p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
        p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
        
    - name: Configure
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" .

    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

    - name: Test
      working-directory: ${{ env.BUILD_DIR }}
      run: ctest
      
    - name: Pluginval Linux
      working-directory: ${{ env.BUILD_DIR }}
      continue-on-error: true
      if: matrix.name == 'Linux'
      run: |
        curl -L "https://github.com/Tracktion/pluginval/releases/download/v0.3.0/pluginval_${{ matrix.name }}.zip" -o pluginval.zip
        unzip pluginval
        # start xvfb in the background
        sudo /usr/bin/Xvfb $DISPLAY &
        sleep 0.5 # let Xvfb start up
        # we'll also need a window manager for JUCE to be happy
        fluxbox & 
        ./pluginval --strictness-level 10 --validate-in-process --verbose --validate "${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3"
        
    - name: Pluginval Mac
      working-directory: ${{ env.BUILD_DIR }}
      continue-on-error: true
      if: matrix.name == 'macOS'
      run: |
        curl -L "https://github.com/Tracktion/pluginval/releases/download/v0.3.0/pluginval_${{ matrix.name }}.zip" -o pluginval.zip
        unzip pluginval
        pluginval.app/Contents/MacOS/pluginval --strictness-level 10 --validate-in-process --verbose --output-dir "." --validate "${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3"

    - name: Pluginval Windows
      shell: cmd
      working-directory: ${{ env.BUILD_DIR }}
      continue-on-error: true
      if: matrix.name == 'Windows'
      run: |
        powershell -Command "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest https://github.com/Tracktion/pluginval/releases/download/v0.3.0/pluginval_Windows.zip -OutFile pluginval.zip"
        powershell -Command "Expand-Archive pluginval.zip -DestinationPath ."
        pluginval.exe --strictness-level 10 --validate-in-process --output-dir "./bin" --validate "${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3"
        if %ERRORLEVEL% neq 0 { exit /b 1 }
    
    - name: Add Icons (macOS)
      if: ${{ matrix.name == 'macOS' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        sips -i ../appdmg/pamplejuce.icns # add the icns as its own icon resource (meta!)
        DeRez -only icns ../appdmg/pamplejuce.icns > /tmp/icons # Grab the icons resource, put in tempfile
        Rez -a /tmp/icons -o ${{ env.VST3_PATH }}/Icon$'\r' # Stuff the resource into the strange Icon? file's resource fork
        Rez -a /tmp/icons -o ${{ env.AU_PATH }}/Icon$'\r' # Same for the AU
        SetFile -a C ${{ env.VST3_PATH }} # Set custom icon attribute
        SetFile -a C ${{ env.AU_PATH }}
      
    - name: Add Icons & Codesign (macOS)
      working-directory: ${{ env.BUILD_DIR }}
      if: ${{ matrix.name == 'macOS' }}
      run: |
        # Each plugin must be code signed
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.VST3_PATH }} --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v ${{ env.AU_PATH }} --deep --strict --options=runtime --timestamp
    
    - name: Create DMG, Notarize and Staple (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        npm install -g appdmg
        mkdir -p appdmg/dmg
        mv ${{ env.ARTIFACTS_PATH }}/VST3/${{ env.PROJECT_NAME }}.vst3 appdmg/dmg
        mv ${{ env.ARTIFACTS_PATH }}/AU/${{ env.PROJECT_NAME }}.component appdmg/dmg 
        cd appdmg && appdmg dmg.json ${{ env.PROJECT_NAME }}-${{ matrix.name }}.dmg
        xcrun notarytool submit ${{ env.PROJECT_NAME }}-${{ matrix.name }}.dmg --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        xcrun stapler staple ${{ env.PROJECT_NAME }}-${{ matrix.name }}.dmg
        
    - name: Zip
      if: ${{ matrix.name != 'macOS' }}
      working-directory: ${{ env.ARTIFACTS_PATH }}
      run: 7z a -tzip ${{ env.PROJECT_NAME }}-${{ matrix.name }}.zip .

    - name: Upload Artifacts (Linux/Windows)
      if: ${{ matrix.name != 'macOS' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}
        path: '${{ github.workspace }}/${{ env.ARTIFACTS_PATH }}/${{ env.PROJECT_NAME }}-${{ matrix.name }}.zip'
        
    - name: Upload DMG (MacOS)
      if: ${{ matrix.name == 'macOS' }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}
        path: appdmg/${{ env.PROJECT_NAME }}-${{ matrix.name }}.dmg
        

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Get Artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: ${{ github.ref }}
        draft: true
        files: |
          ${{ env.PROJECT_NAME }}-Linux.zip/*
          ${{ env.PROJECT_NAME }}-Windows.zip/*
          ${{ env.PROJECT_NAME }}-macOS.dmg/*